version: 21.02.0-alpha21
title: Oneprovider
description: |
  # Overview

  This is the RESTful API definition of Oneprovider component of Onedata data management system [onedata.org](http://onedata.org).

  > This API is defined using [Swagger](http://swagger.io/), the JSON specification can be used to automatically generate
  > client libraries - [swagger.json](../../../swagger/oneprovider/swagger.json).

  All paths below are relative to a common Oneprovider basepath which is `/api/v3/oneprovider`, thus a complete example
  query for 'mode' file attributes would be:
  ```
  https://ONEPROVIDER_HOSTNAME/api/v3/oneprovider/data/$FILE_ID?attribute=mode
  ```
  Please note that currently the default port for Oneprovider instances is `443`.

  In addition to REST API, Oneprovider also provides support for
  [CDMI](http://onedata.org/#/home/documentation/doc/advanced/cdmi.html) protocol.


  ## Authentication
  To use the APIs, the REST client must authenticate with the Oneprovider service and present
  a proof of authorization to perform a specific operation. This is done using access tokens,
  which can be generated using the Onedata GUI or Onezone's REST API.

  The token is passed in the request header like this:
  ```
  X-Auth-Token: MIIFrzCCA5egAwIBAgIBEzANBgkqhkiG9w0BAQUFADBcMQswCQYDVQQGEwJQTDET...
  ```

  The authorization to perform a specific operation depends on the authenticated user's privileges
  in the corresponding space, file level permissions (posix, ACL) and caveats (restrictions)
  inscribed in the provided access token.


  ## Data management basics
  The Onedata system organizes all user data into logical containers called spaces.
  <!--- TODO VFS-7218 uncomment when the new docs are deployed -->
  <!--- For more information, please refer to the [documentation](https://onedata.org/#/home/documentation). -->

  Files and directories in Onedata can be globally identified using unique File Ids or logical paths.
  Whenever possible, it is recommended to use File Ids, due to better performance and no need for escaping or encoding.

  ### File path
  All logical paths in Onedata use the slash (`/`) delimiter and must start with a space name:
  ```lang-none
  /CMS 1/file.txt
  /MyExperiment/directory/subdirectory/image.jpg
  ```

  When referencing files by path in the REST API, make sure to urlencode the path in the URL:
  ```bash
  {...}/CMS%201/file.txt
  ```

  ### File Id

  File Id is a unique, global identifier associated with a file or directory and can be used universally
  in the REST and CDMI APIs. There are several ways to find out the File Id of given file or directory:
  <!---  @TODO VFS-7218 remove redundant information and provide a link to the new docs -->

  **Web GUI** - click on Information in the file/directory context menu and look for File Id.

  **REST API** - use the File Id resolution endpoint. Below example returns the File Id of
  `/CMS 1/file.txt`, where `CMS 1` is the space name:

  ```bash
  curl -H "X-Auth-Token: ${ACCESS_TOKEN}" \
  -X POST "https://${ONEPROVIDER_DOMAIN}/api/v3/oneprovider/lookup-file-id/CMS%201/file.txt"
  {
      "fileId": "094576776E667431723230677767776C6B497031394E445F6E3868677873..."
  }
  ```

  ### Space Id

  Space Id is a unique, global identifier associated with a space and can be used universally in the REST APIs.
  In order to find out the Space Id:

  **Web GUI** - click on Information in the file/directory context menu and look for Space Id.

  **REST API** - use the [Get all user spaces](#operation/get_all_spaces) endpoint.

  The Space Id can be used interchangeably with the space root directory's File Id in the path-based enpoints.

  **Remove specific file relative to the space root**
  ```bash
  curl -H "X-Auth-Token: $TOKEN" -X DELETE "https://$PROVIDER_HOST/api/v3/oneprovider/data/$SPACE_ID/path/dir1/file.txt"
  # is equivalent to
  curl -H "X-Auth-Token: $TOKEN" -X DELETE "https://$PROVIDER_HOST/api/v3/oneprovider/data/$SPACE_ROOT_FILE_ID/path/dir1/file.txt"
  ```
  **Remove specific file relative to any parent directory**
  ```bash
  curl -H "X-Auth-Token: $TOKEN" -X DELETE "https://$PROVIDER_HOST/api/v3/oneprovider/data/$PARENT_FILE_ID/path/dir1/file.txt"
  ```


  ## API structure

  The API is divided into the following sections:

  ### Space management
  These methods provide means for getting basic information about spaces directly
  from the Oneprovider service, but also allows to define database views.

  ### File access and management
  The API provides capabilities for:
    - browsing files in spaces and directories,
    - creating and deleting files as well as updating their content
    - querying for file attributes, such as 'mode' file permissions and updating them,
    - managing custom file metadata (xattrs, JSON, RDF),
    - manual registration of files for imported storages.

  More information can be found [here](#section/Overview/Data-management-basics).

  ### Replica and QoS management
  These methods allow viewing file replica distribution, requesting file replication
  (transfers) between Oneproviders, viewing ongoing and historical transfers data,
  as well as managing QoS requirements that trigger automatic replication according to the QoS rules.

  ### Share management
  Offers methods for creating, modyfying and deleting shares.
  Shares are files or directories that were made publicly available,
  so that they can be viewed by everyone through a public URL.

  ### Dataset & archive management
  API for managing datasets - designated files or directories that are used to facilitate
  building collections of data meaningful for the users with additional features, such as
  write protection and archivisation mechanisms.

  ### Automation
  Basic API for scheduling and viewing workflow executions.

  ### Monitoring
  The API provides means for subscribing (through HTTP long-polling technique) for
  file related events such as reads, writes or deletes which are returned as complete file metadata
  records with sequence numbers representing their current version.

  ### Service information
  Publicly available, basic configuration of the Oneprovider service.

  Detailed examples of API usage are available in the documentation of each operation.

x-bash-codegen-description: |
  # Overview

  This is the RESTful API definition of Oneprovider component of Onedata data management system [onedata.org](http://onedata.org).

  > This API is defined using [Swagger](http://swagger.io/), the JSON specification can be used to automatically generate
  > client libraries - [swagger.json](../../../swagger/oneprovider/swagger.json).

  All paths below are relative to a common Oneprovider basepath which is `/api/v3/oneprovider`, thus a complete example
  query for 'mode' file attributes would be:
  ```
  https://ONEPROVIDER_HOSTNAME/api/v3/oneprovider/data/$FILE_ID?attribute=mode
  ```
  Please note that currently the default port for Oneprovider instances is `443`.

  In addition to REST API, Oneprovider also provides support for
  [CDMI](http://onedata.org/#/home/documentation/doc/advanced/cdmi.html) protocol.


  ## Authentication
  To use the APIs, the REST client must authenticate with the Oneprovider service and present
  a proof of authorization to perform a specific operation. This is done using access tokens,
  which can be generated using the Onedata GUI or Onezone's REST API.

  The token is passed in the request header like this:
  ```
  X-Auth-Token: MIIFrzCCA5egAwIBAgIBEzANBgkqhkiG9w0BAQUFADBcMQswCQYDVQQGEwJQTDET...
  ```

  The authorization to perform a specific operation depends on the authenticated user's privileges
  in the corresponding space, file level permissions (posix, ACL) and caveats (restrictions)
  inscribed in the provided access token.


  ## Data management basics
  The Onedata system organizes all user data into logical containers called spaces.
  <!--- TODO VFS-7218 uncomment when the new docs are deployed -->
  <!--- For more information, please refer to the [documentation](https://onedata.org/#/home/documentation). -->

  Files and directories in Onedata can be globally identified using unique File Ids or logical paths.
  Whenever possible, it is recommended to use File Ids, due to better performance and no need for escaping or encoding.

  ### File path
  All logical paths in Onedata use the slash (`/`) delimiter and must start with a space name:
  ```lang-none
  /CMS 1/file.txt
  /MyExperiment/directory/subdirectory/image.jpg
  ```

  When referencing files by path in the REST API, make sure to urlencode the path in the URL:
  ```bash
  {...}/CMS%201/file.txt
  ```

  ### File Id

  File Id is a unique, global identifier associated with a file or directory and can be used universally
  in the REST and CDMI APIs. There are several ways to find out the File Id of given file or directory:
  <!---  @TODO VFS-7218 remove redundant information and provide a link to the new docs -->

  **Web GUI** - click on Information in the file/directory context menu and look for File Id.

  **REST API** - use the File Id resolution endpoint. Below example returns the File Id of
  `/CMS 1/file.txt`, where `CMS 1` is the space name:

  ```bash
  curl -H "X-Auth-Token: ${ACCESS_TOKEN}" \
  -X POST "https://${ONEPROVIDER_DOMAIN}/api/v3/oneprovider/lookup-file-id/CMS%201/file.txt"
  {
      "fileId": "094576776E667431723230677767776C6B497031394E445F6E3868677873..."
  }
  ```

  ### Space Id

  Space Id is a unique, global identifier associated with a space and can be used universally in the REST APIs.
  In order to find out the Space Id:

  **Web GUI** - click on Information in the file/directory context menu and look for Space Id.

  **REST API** - use the [Get all user spaces](#operation/get_all_spaces) endpoint.

  The Space Id can be used interchangeably with the space root directory's File Id in the path-based enpoints.

  **Remove specific file relative to the space root**
  ```bash
  curl -H "X-Auth-Token: $TOKEN" -X DELETE "https://$PROVIDER_HOST/api/v3/oneprovider/data/$SPACE_ID/path/dir1/file.txt"
  # is equivalent to
  curl -H "X-Auth-Token: $TOKEN" -X DELETE "https://$PROVIDER_HOST/api/v3/oneprovider/data/$SPACE_ROOT_FILE_ID/path/dir1/file.txt"
  ```
  **Remove specific file relative to any parent directory**
  ```bash
  curl -H "X-Auth-Token: $TOKEN" -X DELETE "https://$PROVIDER_HOST/api/v3/oneprovider/data/$PARENT_FILE_ID/path/dir1/file.txt"
  ```


  ## API structure

  The API is divided into the following sections:

  ### Space management
  These methods provide means for getting basic information about spaces directly
  from the Oneprovider service, but also allows to define database views.

  ### File access and management
  The API provides capabilities for:
    - browsing files in spaces and directories,
    - creating and deleting files as well as updating their content
    - querying for file attributes, such as 'mode' file permissions and updating them,
    - managing custom file metadata (xattrs, JSON, RDF),
    - manual registration of files for imported storages.

  More information can be found [here](#section/Overview/Data-management-basics).

  ### Replica and QoS management
  These methods allow viewing file replica distribution, requesting file replication
  (transfers) between Oneproviders, viewing ongoing and historical transfers data,
  as well as managing QoS requirements that trigger automatic replication according to the QoS rules.

  ### Share management
  Offers methods for creating, modyfying and deleting shares.
  Shares are files or directories that were made publicly available,
  so that they can be viewed by everyone through a public URL.

  ### Dataset & archive management
  API for managing datasets - designated files or directories that are used to facilitate
  building collections of data meaningful for the users with additional features, such as
  write protection and archivisation mechanisms.

  ### Automation
  Basic API for scheduling and viewing workflow executions.

  ### Monitoring
  The API provides means for subscribing (through HTTP long-polling technique) for
  file related events such as reads, writes or deletes which are returned as complete file metadata
  records with sequence numbers representing their current version.

  ### Service information
  Publicly available, basic configuration of the Oneprovider service.

  Detailed examples of API usage are available in the documentation of each operation.


contact:
  name: Onedata support
  url: https://onedata.org/support
  email: info@onedata.org
license:
  name: Apache 2.0
  url: http://www.apache.org/licenses/LICENSE-2.0.html
x-logo:
  url: https://onedata.org/assets/images/api/oneprovider-logo.svg
  backgroundColor: "#FFFFFF"
