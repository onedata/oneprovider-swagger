version: 21.02.0-alpha21
title: Oneprovider
description: |
  # Overview

  This is the RESTful API definition of Oneprovider component of Onedata data management system [onedata.org](http://onedata.org).

  > This API is defined using [Swagger](http://swagger.io/), the JSON specification can be used to automatically generate
  > client libraries - [swagger.json](../../../swagger/oneprovider/swagger.json).

  All paths below are relative to a common Oneprovider basepath which is `/api/v3/oneprovider`, thus a complete example
  query for 'mode' file attributes would be:
  ```
  https://ONEPROVIDER_HOSTNAME/api/v3/oneprovider/data/$FILE_ID?attribute=mode
  ```
  Please note that currently the default port for Oneprovider instances is `443`.

  In addition to REST API, Oneprovider also provides support for [CDMI](http://onedata.org/#/home/documentation/doc/advanced/cdmi.html) protocol,
  and some of data management operations are currently only possible via CDMI.


  ## Authentication
  In order to be able to use this API the REST client must be able to authenticate with the Oneprovider service.

  Currently this is supported through authentication token which can be generate using the Onedata user interface.
  The token must be added to the request header like this:
  ```
  X-Auth-Token: LAKSJHDLKJAHSDKLJHASKLCBBASKLCBLHABSCBALKSBCK...
  ```
  In case this Onedata deployment supports authentication delegation other IdP's,
  the `X-Auth-Token` field can contain token from such IdP with appropriate prefix,
  as configured by Onezone administrators, e.g.:
  ```
    X-Auth-Token: github:GST5aasdA7asdAASFG7asdasaAS
  ```
  In addition please take into account, that depending on your account authorization rights, not all operations
  may be possible.

  ## API structure
  The Oneprovider API reflects the fact that most operations deal directly with virtual file paths relative to
  user spaces, which are provided as part of the paths in the REST calls.

  The API provides the following functionality:

  ### Data

  #### File information
  The `/data/` path methods provide basic capability for:
    - browsing files in spaces and directories,
    - querying for file attributes, such as 'mode' file permissions and updating them,
    - managing file metadata.

  #### Share information
  The `/share/` methods enable creating, modyfying and deleting shares.
  Shares are directories that were made publicly available, so they can be viewed by everyone
  through public URL.

  #### Space information
  The `/space/` methods provide means for getting basic information about
  spaces directly from the Oneprovider service but also allows to define views and
  list transfers for specified space.

  More information can be found [here](#section/Overview/Data).

  ### Replication

  #### Replica management
  The `/replicas/` methods allow retrieving information about file replica distribution
  among Onedata providers as well as requesting specific file replication to selected
  providers.

  #### Transfer management
  The `/transfer/` operations provide basic transfer management functionality based on the Id of transfer
  returned by `/replicas/{path} [POST]` operation.

  ### Monitoring

  #### Changes subscription
  The `/changes/` method group provides means for subscribing (through HTTP long-polling technique) for
  file related events such as reads, writes or deletes which are returned as complete file metadata
  records with sequence numbers representing their current version.

  #### Monitoring metrics
  The `/metrics/` operations enable retrieval of internal Oneprovider monitoring data.
  All monitoring data is returned in the form of [RRD](http://oss.oetiker.ch/rrdtool/)
  database files, with resolution determined by the `step` query parameter.

  ## Data

  The Onedata system organizes all user data into logical containers called spaces.
  <!--- TODO VFS-7218 uncomment when the new docs are deployed -->
  <!--- For more information, please refer to the [documentation](https://onedata.org/#/home/documentation). -->


  ### File path and Id
  Files and directories in Onedata can be globally identified using unique File Ids or logical paths.
  Whenever possible, it is recommended to use File Ids, due to better performance and no need for escaping or encoding.

  ### File path
  All logical paths in Onedata use the slash (`/`) delimiter and must start with a space name:
  ```
  /CMS 1/file.txt
  /MyExperiment/directory/subdirectory/image.jpg
  ```

  **REST API**

  When referencing files by path in the REST API, make sure to urlencode the path in the URL:
  ```bash
  {...}/CMS%201/file.txt
  ```

  ### File Id

  File Id is a unique, global identifier associated with a file or directory and can be used universally
  in the REST and CDMI APIs. There are several ways to find out the File Id of given file or directory:
  <!---  @TODO VFS-7218 remove redundant information and provide a link to the new docs -->

  **Web GUI** - click on Information in the file/directory context menu and look for File Id.

  **REST API** - use the File Id resolution endpoint. Below example returns the File Id of
  `/CMS 1/file.txt`, where `CMS 1` is the space name:

  ```bash
  curl -H "X-Auth-Token: ${ACCESS_TOKEN}" \
  -X POST "https://${ONEPROVIDER_DOMAIN}/api/v3/oneprovider/lookup-file-id/CMS%201/file.txt"
  {
      "fileId": "094576776E667431723230677767776C6B497031394E445F6E3868677873..."
  }
  ```

  ### SPACE Id

  Space Id is a unique, global identifier associated with a space and can be used universally in the REST APIs.

  **Web GUI** - click on Information in the file/directory context menu and look for Space Id.

  **REST API** - use the [Get all user spaces](#operation/get_all_spaces) endpoint.

  The Space Id can be used interchangeably with the space root directory's File Id in the path-based enpoints.

  **Remove specific file relative to the space root**
  ```bash
  curl -H "X-Auth-Token: $TOKEN" -X DELETE "https://$PROVIDER_HOST/api/v3/oneprovider/data/$SPACE_ID/path/dir1/file.txt"
  # is equivalent to
  curl -H "X-Auth-Token: $TOKEN" -X DELETE "https://$PROVIDER_HOST/api/v3/oneprovider/data/$SPACE_ROOT_FILE_ID/path/dir1/file.txt"
  ```
  **Remove specific file relative to any parent directory**
  ```bash
  curl -H "X-Auth-Token: $TOKEN" -X DELETE "https://$PROVIDER_HOST/api/v3/oneprovider/data/$PARENT_FILE_ID/path/dir1/file.txt"
  ```

  ## Examples

  **Create replica of file at specific storage provider**
  ```bash
  curl -v --tlsv1.2 -H "X-Auth-Token: $TOKEN" -X POST \
  "https://$PROVIDER/api/v3/oneprovider/replicas/MySpace1/MyFile2.txt?provider_id=$PROVIDER_ID"
  ```

  **Get space storage qouta metric**
  ```bash
  curl -v --tlsv1.2 -H "X-Auth-Token: $TOKEN" -X GET \
  "https://$PROVIDER/api/v3/oneprovider/metrics/space/MySpace1?metric=storage_qouta"
  ```

  More detailed examples are available in the documentation of each operation.

x-bash-codegen-description: |

  # Overview

  This is the RESTful API definition of Oneprovider component of Onedata data management system [onedata.org](http://onedata.org).

  > This API is defined using [Swagger](http://swagger.io/), the JSON specification can be used to automatically generate
  > client libraries - [swagger.json](../../../swagger/oneprovider/swagger.json).

  All paths below are relative to a common Oneprovider basepath which is `/api/v3/oneprovider`, thus a complete example
  query for 'mode' file attributes would be:
  ```
  https://ONEPROVIDER_HOSTNAME/api/v3/oneprovider/data/$FILE_ID?attribute=mode
  ```
  Please note that currently the default port for Oneprovider instances is `443`.

  In addition to REST API, Oneprovider also provides support for [CDMI](http://onedata.org/#/home/documentation/doc/advanced/cdmi.html) protocol,
  and some of data management operations are currently only possible via CDMI.


  ## Authentication
  In order to be able to use this API the REST client must be able to authenticate with the Oneprovider service.

  Currently this is supported through authentication token which can be generate using the Onedata user interface.
  The token must be added to the request header like this:
  ```
  X-Auth-Token: LAKSJHDLKJAHSDKLJHASKLCBBASKLCBLHABSCBALKSBCK...
  ```
  In case this Onedata deployment supports authentication delegation other IdP's,
  the `X-Auth-Token` field can contain token from such IdP with appropriate prefix,
  as configured by Onezone administrators, e.g.:
  ```
    X-Auth-Token: github:GST5aasdA7asdAASFG7asdasaAS
  ```
  In addition please take into account, that depending on your account authorization rights, not all operations
  may be possible.

  ## API structure
  The Oneprovider API reflects the fact that most operations deal directly with virtual file paths relative to
  user spaces, which are provided as part of the paths in the REST calls.

  The API provides the following functionality:

  ### Data

  #### File information
  The `/data/` path methods provide basic capability for:
    - browsing files in spaces and directories,
    - querying for file attributes, such as 'mode' file permissions and updating them,
    - managing file metadata.

  #### Share information
  The `/share/` methods enable creating, modyfying and deleting shares.
  Shares are directories that were made publicly available, so they can be viewed by everyone
  through public URL.

  #### Space information
  The `/space/` methods provide means for getting basic information about
  spaces directly from the Oneprovider service but also allows to define views and
  list transfers for specified space.

  More information can be found [here](#section/Overview/Data).

  ### Replication

  #### Replica management
  The `/replicas/` methods allow retrieving information about file replica distribution
  among Onedata providers as well as requesting specific file replication to selected
  providers.

  #### Transfer management
  The `/transfer/` operations provide basic transfer management functionality based on the Id of transfer
  returned by `/replicas/{path} [POST]` operation.

  ### Monitoring

  #### Changes subscription
  The `/changes/` method group provides means for subscribing (through HTTP long-polling technique) for
  file related events such as reads, writes or deletes which are returned as complete file metadata
  records with sequence numbers representing their current version.

  #### Monitoring metrics
  The `/metrics/` operations enable retrieval of internal Oneprovider monitoring data.
  All monitoring data is returned in the form of [RRD](http://oss.oetiker.ch/rrdtool/)
  database files, with resolution determined by the `step` query parameter.

  ## Data

  The Onedata system organizes all user data into logical containers called spaces.
  <!--- TODO VFS-7218 uncomment when the new docs are deployed -->
  <!--- For more information, please refer to the [documentation](https://onedata.org/#/home/documentation). -->


  ### File path and Id
  Files and directories in Onedata can be globally identified using unique File Ids or logical paths.
  Whenever possible, it is recommended to use File Ids, due to better performance and no need for escaping or encoding.

  ### File path
  All logical paths in Onedata use the slash (`/`) delimiter and must start with a space name:
  ```
  /CMS 1/file.txt
  /MyExperiment/directory/subdirectory/image.jpg
  ```

  **REST API**

  When referencing files by path in the REST API, make sure to urlencode the path in the URL:
  ```bash
  {...}/CMS%201/file.txt
  ```

  ### File Id

  File Id is a unique, global identifier associated with a file or directory and can be used universally
  in the REST and CDMI APIs. There are several ways to find out the File Id of given file or directory:
  <!---  @TODO VFS-7218 remove redundant information and provide a link to the new docs -->

  **Web GUI** - click on Information in the file/directory context menu and look for File Id.

  **REST API** - use the File Id resolution endpoint. Below example returns the File Id of
  `/CMS 1/file.txt`, where `CMS 1` is the space name:

  ```bash
  curl -H "X-Auth-Token: ${ACCESS_TOKEN}" \
  -X POST "https://${ONEPROVIDER_DOMAIN}/api/v3/oneprovider/lookup-file-id/CMS%201/file.txt"
  {
      "fileId": "094576776E667431723230677767776C6B497031394E445F6E3868677873..."
  }
  ```

  ### SPACE Id

  Space Id is a unique, global identifier associated with a space and can be used universally in the REST APIs.

  **Web GUI** - click on Information in the file/directory context menu and look for Space Id.

  **REST API** - use the [Get all user spaces](#operation/get_all_spaces) endpoint.

  The Space Id can be used interchangeably with the space root directory's File Id in the path-based enpoints.

  **Remove specific file relative to the space root**
  ```bash
  curl -H "X-Auth-Token: $TOKEN" -X DELETE "https://$PROVIDER_HOST/api/v3/oneprovider/data/$SPACE_ID/path/dir1/file.txt"
  # is equivalent to
  curl -H "X-Auth-Token: $TOKEN" -X DELETE "https://$PROVIDER_HOST/api/v3/oneprovider/data/$SPACE_ROOT_FILE_ID/path/dir1/file.txt"
  ```
  **Remove specific file relative to any parent directory**
  ```bash
  curl -H "X-Auth-Token: $TOKEN" -X DELETE "https://$PROVIDER_HOST/api/v3/oneprovider/data/$PARENT_FILE_ID/path/dir1/file.txt"
  ```

  ## Examples

  **Create replica of file at specific storage provider**
  ```bash
  curl -v --tlsv1.2 -H "X-Auth-Token: $TOKEN" -X POST \
  "https://$PROVIDER/api/v3/oneprovider/replicas/MySpace1/MyFile2.txt?provider_id=$PROVIDER_ID"
  ```

  **Get space storage qouta metric**
  ```bash
  curl -v --tlsv1.2 -H "X-Auth-Token: $TOKEN" -X GET \
  "https://$PROVIDER/api/v3/oneprovider/metrics/space/MySpace1?metric=storage_qouta"
  ```

  More detailed examples are available in the documentation of each operation.


contact:
  name: Onedata support
  url: https://onedata.org/support
  email: info@onedata.org
license:
  name: Apache 2.0
  url: http://www.apache.org/licenses/LICENSE-2.0.html
x-logo:
  url: https://onedata.org/assets/images/api/oneprovider-logo.svg
  backgroundColor: "#FFFFFF"
