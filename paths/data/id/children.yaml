post:
  operationId: create_file
  x-onedata-gri:
    type: op_file
    id: ?OBJECTID_BINDING(id)
    aspect: child
  summary: Create file in directory
  tags:
    - Basic File Operations
  x-bash-codegen-description: |
    Creates a file in the directory specified by [$PARENT_ID](#operation/lookup_file_id).
    
    If the file already exists, the operation fails with an error.
    
    The file type can be of:
    - `REG` (regular file) - in this case, **the data sent in request body (if any)
    is saved as file content**.
    - `DIR` (directory).
    - `LNK` (hard link) - requires that `target_file_id` pointing to a regular file
    is specified.
    - `SYMLNK` (symbolic link) - requires that `target_file_path` is specified.
    When creating symbolic link with absolute path starting from specific space
    it is necessary to do so by replacing `/$SPACE_NAME/` in path by special prefix in the form
    `<__onedata_space_id:$SPACE_ID>/` (where $SPACE_ID is actual space id)

  description: |
    Creates a file in the directory specified by [$PARENT_ID](#operation/lookup_file_id).
    
    If the file already exists, the operation fails with an error.
    
    The file type can be of:
    - `REG` (regular file) - in this case, **the data sent in request body (if any)
    is saved as file content**.
    - `DIR` (directory).
    - `LNK` (hard link) - requires that `target_file_id` pointing to a regular file
    is specified.
    - `SYMLNK` (symbolic link) - requires that `target_file_path` is specified.
    When creating symbolic link with absolute path starting from specific space
    it is necessary to do so by replacing `/$SPACE_NAME/` in path by special prefix in the form
    `<__onedata_space_id:$SPACE_ID>/` (where $SPACE_ID is actual space id)

    ***Example cURL requests***

    **Create file**
    ```bash
    curl -H "X-Auth-Token: $TOKEN" \
    -X POST "https://$PROVIDER_HOST/api/v3/oneprovider/data/$PARENT_ID/children?name=$NAME"
    -H "Content-Type: application/octet-stream" -d "@file.dat"

    {
       "fileId": "094576776E667431723230677767776C6B497031394E445F6E3868677873..."
    }
    ```

    **Create directory**
    ```bash
    curl -H "X-Auth-Token: $TOKEN" \
    -X POST "https://$PROVIDER_HOST/api/v3/oneprovider/data/$PARENT_ID/children?name=$NAME&type=DIR"

    {
       "fileId": "000000006CB6637368617265477569642333396432363661656463656266..."
    }
    ```

    **Create hard link**
    ```bash
    curl -H "X-Auth-Token: $TOKEN" \
    -X POST "https://$PROVIDER_HOST/api/v3/oneprovider/data/$PARENT_ID/children?name=$NAME&type=LNK&target_file_id=$TARGET_FILE_ID"

    {
       "fileId": "000000184465677569642373706163655F73706163653123737061636531..."
    }
    ```

    **Create symbolic link**
    ```bash
    curl -H "X-Auth-Token: $TOKEN" \
    -X POST "https://$PROVIDER_HOST/api/v3/oneprovider/data/$PARENT_ID/children?name=$NAME&type=SYMLNK&target_file_path=$TARGET_FILE_PATH"

    {
       "fileId": "00989AB98890037368617265477569642333396432363661656463656266..."
    }
    ```

    See also [Create file at path](#operation/create_file_at_path).

  consumes:
    - application/octet-stream
  produces:
    - application/json
  responses:
    '201':
      description: >
        The request has been accepted and the result is the file Id.
        Also URI of the file in form https://$PROVIDER_HOST/api/v3/oneprovider/data/{id} is
        returned in the response `Location` header.
      headers:
        Location:
          description: URI of the file.
          type: string
      schema:
        type: object
        properties:
          fileId:
            type: string
            description: file Id.
    '400':
      description: Invalid request.
      schema:
        $ref: '#/definitions/Error'
    '403':
      description: Forbidden request.
      schema:
        $ref: '#/definitions/Error'
    '404':
      description: File not found.
      schema:
        $ref: '#/definitions/Error'
    '500':
      description: Internal server error.
      schema:
        $ref: '#/definitions/Error'
  parameters:
    - name: id
      in: path
      description: Id of the parent directory.
      required: true
      type: string
    - name: name
      in: query
      description: Name of the file.
      required: true
      type: string
    - name: type
      in: query
      description: Type of the file.
      required: false
      type: string
      enum:
        - REG
        - DIR
        - LNK
        - SYMLNK
      default: REG
    - name: mode
      in: query
      description: POSIX file permissions in decimal format.
      required: false
      type: integer
    - name: offset
      in: query
      description: > 
        Offset at which the data sent as request body will be written to the file (relevant only if `type == "REG"`).
      required: false
      type: integer
      default: 0
    - name: target_file_id
      in: query
      description: >
        The Id of the file to which the hard link should point (relevant only if `type == "LNK"`).
      required: false
      type: string
    - name: target_file_path
      in: query
      description: >
        Path to which the symbolic link should point (relevant only if `type == "SYMLNK"`).
      required: false
      type: string
    - name: content
      in: body
      description: File content to be written at specified offset (relevant only if `type == "REG"`).
      required: false
      schema:
        type: string
        format: binary
  x-code-samples:
    - lang: Shell
      source: "oneprovider-rest-cli createFile id=$PARENT_ID name=$FILE_NAME"


get:
  operationId: list_children
  x-onedata-gri:
    type: op_file
    id: ?OBJECTID_BINDING(id)
    aspect: children
  tags:
    - Basic File Operations
  summary: List directory files and subdirectories
  x-bash-codegen-description: |
    Returns the list of directory files and subdirectories for directory
    specified by [$DIR_ID](#operation/lookup_file_id).

  description: |
    Returns the list of directory files and subdirectories for directory
    specified by [$DIR_ID](#operation/lookup_file_id).

    ***Example cURL requests***

    **Get files in space subdirectory**
    ```bash
    curl -H "X-Auth-Token: $TOKEN" \
    -X GET "https://$PROVIDER_HOST/api/v3/oneprovider/data/$DIR_ID/children?attributes=size&attributes=name&attributes=xattr.key&limit=2"

    {
        "children": [
            { 
                "name": File1.txt,
                "size": 1024,
                "xattr.key": "extended_attribute_value"
            },
            { 
                "name": File2.txt,
                "size": 16384,
                "xattr.key": null
            }
        ],
        "isLast": false,
        "nextPageToken": "g2gDZAAKbGlua190b2tlbmgCZAAMY2FjaGVkX3Rva2VuWgADY..."
    }
    ```
  produces:
    - application/json
  responses:
    '200':
      description: The list of directory files and subdirectories.
      schema:
        $ref: '#/definitions/DirectoryChildren'
    '400':
      description: Invalid request.
      schema:
        $ref: '#/definitions/Error'
    '403':
      description: Forbidden request.
      schema:
        $ref: '#/definitions/Error'
    '404':
      description: Invalid path - file or directory not found.
      schema:
        $ref: '#/definitions/Error'
    '500':
      description: Internal server error.
      schema:
        $ref: '#/definitions/Error'
  parameters:
    - name: id
      in: path
      description: Id of the directory to be listed.
      type: string
      required: true

    - name: limit
      in: query
      description: >
        Allows specifying maximum number of files that should be returned. If there are more files,
        they can be retrieved using the `token` query parameter.
      type: integer
      required: false
      maximum: 1000
      minimum: 1
      default: 1000

    - name: token
      in: query
      description: >
        Determines the starting point for listing. The listing will start from the next page (batch) of entries
        which follows the page previously obtained along with the corresponding `nextPageToken`.
        Cannot be provided alongside the `index` or `tune_for_large_continuous_listing` parameters.
      type: string
      required: false
      default: null

    # @TODO VFS-11412 make index only accept index from file attr
    - name: index
      in: query
      description: >
        Determines the starting point for listing. The listing will (inclusively) start from the first
        file whose name is lexicographically greater or equal to the specified index.
        Cannot be provided alongside the `token` parameter.
      type: string
      required: false

    - name: offset
      in: query
      description: >
        Expressed in number of entries, further adjusts the starting point of listing indicated by the `index` 
        parameter (or the list beginning if the `index` is not specified).
        The value can be negative, in such case entries preceding the starting point will be returned.
        Cannot be provided alongside the `token` parameter.
      type: integer
      required: false
      maximum: 500
      minimum: -500
      default: 0

    - name: tuneForLargeContinuousListing
      in: query
      description: >
        This option increases performance of listing large directories (with thousands of files)
        when using subsequent calls with paging tokens.<br/>
        **CAUTION!!** When enabled, there is no guarantee that changes in the file tree performed
        after the start of listing will be included. Therefore it shouldn't be used when the
        listing result is expected to be up to date with the state of the file tree at the moment of listing.
        It should be avoided if the interval between subsequent listings is longer than 10 seconds,
        otherwise the listing performance will be much worse.<br/>
        Overusing this option may cause a significant load on the Oneprovider.<br/>
        Cannot be provided alongside the `token` parameter.
      type: boolean
      required: false
      default: false

    - name: tune_for_large_continuous_listing
      in: query
      description: >
        (deprecated) This option increases performance of listing large directories (with thousands of files)
        when using subsequent calls with paging tokens.<br/>
        **CAUTION!!** When enabled, there is no guarantee that changes in the file tree performed
        after the start of listing will be included. Therefore it shouldn't be used when the
        listing result is expected to be up to date with the state of the file tree at the moment of listing.
        It should be avoided if the interval between subsequent listings is longer than 10 seconds,
        otherwise the listing performance will be much worse.<br/>
        Overusing this option may cause a significant load on the Oneprovider.<br/>
        Cannot be provided alongside the `token` parameter.
        Ignored when provided alongside `tuneForLargeContinuousListing` parameter.
      type: boolean
      required: false
      default: false

    - name: attributes
      in: query
      required: false
      description: >
        Name of the attribute to be included in the results for each listed file. Can be provided multiple times. 
        For a shared file/directory accessed in public mode, only the following attributes are available: 
        `fileId`, `index`, `type`, `activePermissionsType`, `mode`, `name`, `conflictingName`, `parentFileId`, 
        `atime`, `mtime`, `ctime`, `size`, `directShareIds`, `symlinkValue`, `hasCustomMetadata`, `xattr.*`.
        If not provided, deprecated parameter `attribute` is taken into account. When both are not provided 
        default deprecated attributes of `file_id` and `name` will be returned.
      type: string
      enum:
        - fileId
        - index
        - type
        - activePermissionsType
        - posixPermissions
        - acl
        - name
        - conflictingName
        - path
        - parentFileId
        - displayGid
        - displayUid
        - atime
        - mtime
        - ctime
        - size
        - isFullyReplicatedLocally
        - localReplicationRate
        - originProviderId
        - directShareIds
        - ownerUserId
        - hardlinkCount
        - symlinkValue
        - hasCustomMetadata
        - effProtectionFlags
        - effDatasetProtectionFlags
        - effDatasetMembership
        - effQosMembership
        - qosStatus
        - recallRootFileId
        - xattr.*
    - name: attribute
      in: query
      required: false
      description: >
        (Deprecated) Name of attribute to query for. Can be provided multiple times. 
        When accessing file via share mode following attributes are unavailable: 
        `owner_id`, `storage_group_id`, `storage_user_id`, `provider_id`, `hardlinks_count`.
        Ignored when provided alongside `attributes` parameter.
        If not provided, default attributes of `file_id` and `name` will be returned.
      type: string
      enum:
        - name
        - owner_id
        - type
        - mode
        - size
        - atime
        - mtime
        - ctime
        - storage_group_id
        - storage_user_id
        - shares
        - provider_id
        - file_id
        - parent_id
        - hardlinks_count
        - index
        - xattr.*
  x-code-samples:
  - lang: Shell
    source: "oneprovider-rest-cli listChildren id=$FILE_ID limit=100 index=filename.txt"