get:
  operationId: get_file_metadata_by_id
  x-onedata-gri:
    type: op_file
    id: ?OBJECTID_BINDING(id)
    aspect: metadata
  summary: Get file metadata by ID
  tags:
    - File
  x-bash-codegen-description: |
    This method returns the metadata document for specified file, folder or
    space by ID. Onedata supports multiple metadata backends in parallell.

    The currently supported metadata stores include:
     * JSON
     * RDF

    The metadata source will be selected automatically based on the "Accept: "
    header in the request, or from the optional `metadata_type` query parameter.

    By default the method returns the complete metadata document of requested
    type. It is possible to request only a part of the document by specifying
    filter_type` and `filter` attributes in the query.

    Supported filter types are currently supported only for JSON backend:
      * **keypath** - list of JSON keys which point to requested JSON object,
                    separated by `.`, array elements should be expressed as
                    `[i]` (e.g. `key1.key2.[2].key3`)

  description: |
    This method returns the metadata document for specified file, folder or space by ID. Onedata supports multiple metadata backends in parallell.

    The currently supported metadata stores include:
     * JSON
     * RDF

    The metadata source will be selected automatically based on the "Accept: " header in the request, or from the optional `metadata_type` query parameter.

    By default the method returns the complete metadata document of requested type. It is possible to request only a part of the document by specifying `filter_type` and `filter` attributes in the query.

    Supported filter types are currently supported only for JSON backend:
      * **keypath** - list of JSON keys which point to requested JSON object, separated by `.`, array elements should be expressed as `[i]` (e.g. `key1.key2.[2].key3`)


    ***Example cURL requests***

    **Get complete RDF metadata document for file**

    ```bash
    curl --tlsv1.2 -H "X-Auth-Token: $TOKEN" -X GET \
    -H "Accept: application/rdf+xml" \
    https://$HOST/api/v3/oneprovider/metadata-id/6fd04d80-3856-4f82-8382-4fca29b1171d
    ```

    **Get specific JSON value from metadata document**

    ```bash
    curl --tlsv1.2 -H "X-Auth-Token: $TOKEN" -X GET \
    -H "Accept: application/json" \
    https://$HOST/api/v3/oneprovider/metadata-id/7f85c115-8631-4602-b7d5-47cd969280a2?filter_type=keypath&filter=key1.key2.[2].key3
    ```

    **Set specific JSON value in metadata document using key path**
    In this example the contents of the PUT body will be assigned the
    value of "key3" in the metadata document.

    ```bash
    curl --tlsv1.2 -H "X-Auth-Token: $TOKEN" -X PUT \
    -H "Content-type: application/json" \
    -d '{"new_key": "new_value"}'
    https://$HOST/api/v3/oneprovider/metadata-id/7f85c115-8631-4602-b7d5-47cd969280a2?filter_type=keypath&filter=key1.key2.[2].key3
    ```
  produces:
    - application/json
    - application/rdf+xml
  responses:
    '200':
      description: Metadata returned successfully.
      schema:
        type: string
    '400':
      description: Invalid request.
      schema:
        $ref: '#/definitions/Error'
    '403':
      description: Forbidden request.
      schema:
        $ref: '#/definitions/Error'
    '404':
      description: File not found.
      schema:
        $ref: '#/definitions/Error'
    '500':
      description: Internal server error.
      schema:
        $ref: '#/definitions/Error'
  parameters:
  - name: id
    in: path
    description: File or folder path or space ID
    type: string
    required: true
  - name: metadata_type
    in: query
    description: Type of metadata backend (if not specified in `Accept` header)
    type: string
    required: false
    enum:
      - json
      - rdf
  - name: filter_type
    in: query
    description: The type of filter to apply to the metadata document.
    type: string
    required: false
  - name: filter
    in: query
    description: The filter to apply to the metadata document before returning.
    type: string
    required: false
  - name: inherited
    in: query
    description: >
      When set to true, this operation will merge the metadata documents from
      parent folders as well as entire space into a single JSON or RDF document.
    type: boolean
    required: false
  x-code-samples:
  - lang: Shell
    source: "oneprovider-rest-cli -ac rdf getFileMetadata id=ASJHDJHASD7132nasdlASD"


put:
  operationId: set_file_metadata_by_id
  x-onedata-parse_body: as_is
  x-onedata-gri:
    type: op_file
    id: ?OBJECTID_BINDING(id)
    aspect: metadata
  summary: Set file metadata by ID
  tags:
    - File
  description: |
    This method allows to set specific metadata document for a file, folder or space specified by ID in the request path.

    The currently supported metadata stores include:
     * JSON
     * RDF

    The metadata source will be selected automatically based on the "Content-type: " header in the request, or from the optional `metadata_type` query parameter.

    This operation will replace the entire metadata document in the specified metadata backend.

    ***Example cURL requests***

    **Set JSON metadata for file**
    ```bash
    curl --tlsv1.2 -H "X-Auth-Token: $TOKEN" -X PUT \
    -H "Content-type: application/json" \
    -d '{ "key1": { "key2": ["val1", "val2", "val3", "val4"] } }'
    https://$HOST/api/v3/oneprovider/metadata-id/9e91571f-9dc9-4cea-a86a-9e6bae5aaaca
    ```

    **Set RDF metadata for space from RDF file**
    ```bash
    curl --tlsv1.2 -H "X-Auth-Token: $TOKEN" -X PUT \
    -H "Content-type: application/rdf+xml" \
    -d "@./space1_dublincore.rdf"
    https://$HOST/api/v3/oneprovider/metadata-id/1e65d5f4-c49d-495a-a2b6-50acd02a25b1
    ```

  consumes:
    - application/json
    - application/rdf+xml
  responses:
    '204':
      description: Metadata document updated successfully.
    '400':
      description: Invalid request.
      schema:
        $ref: '#/definitions/Error'
    '403':
      description: Forbidden request.
      schema:
        $ref: '#/definitions/Error'
    '404':
      description: File not found.
      schema:
        $ref: '#/definitions/Error'
    '500':
      description: Internal server error.
      schema:
        $ref: '#/definitions/Error'
  parameters:
  - name: id
    in: path
    description: File or folder path or space name (e.g. '/My Private Space/testfiles/file1.txt')
    type: string
    required: true
  - name: filter_type
    in: query
    description: The type of filter to apply to the metadata document.
    type: string
    required: false
  - name: filter
    in: query
    description: The filter allowing to set specific metadata document key. Required if filter_type is specified.
    type: string
    required: false
  - name: body
    in: body
    description: The metadata document in one of accepted formats.
    required: true
    schema:
      type: string
  x-code-samples:
  - lang: Shell
    source: "cat metadata.json | oneprovider-rest-cli -ct json setFileMetadataById id=ALKSJDHKASD7687asDBASDDsd -"
